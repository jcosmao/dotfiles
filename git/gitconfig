# vim: set ft=gitconfig:

[core]
	excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

[init]
    templatedir = ~/.git/hooks

[user]
    name = USERNAME
    email = MAIL

[gitreview]
    username = USERNAME

[credential]
	helper = store

[branch]
    autosetupmerge = true
    autosetuprebase = always

[diff]
    ignoreSubmodules = dirty

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[push]
    default = current
    followTags = false

[merge]
	# Include summaries of merged commits in newly created merge commit messages
    log = true

[apply]
	# Detect whitespace errors when applying a patch
    whitespace = fix

[stash]
    showPatch = true

[help]
	# Automatically correct and execute mistyped commands
    autocorrect = 1

[alias]
    aliases = config --get-regexp alias
    br = branch -vv
    l = log --stat
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    ls = ls-files
    tshow = !git rev-parse --abbrev-ref --symbolic-full-name @{u}
    tset = "!f() { rb=${1:-dev/USERNAME/$(git symbolic-ref --short HEAD)}; git branch -u origin/$rb; }; f"
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    st = status --short
    ca = commit -a --amend --reuse-message=HEAD
    pushorigin = !git push --set-upstream origin $(git symbolic-ref --short HEAD)
    pushdev = !git push --set-upstream origin $(git symbolic-ref --short HEAD):dev/USERNAME/$(git symbolic-ref --short HEAD)
    pf = pushdev --force
    pick = cherry-pick -s -x --allow-empty
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
    # Remove branches that have already been merged with master
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    rst = "!f() { git clean -xfd && git reset --hard; }; f"
    # List contributors with number of commits
    contributors = shortlog --summary --numbered
    # https://stackoverflow.com/questions/3161204/how-to-find-the-nearest-parent-of-a-git-branch
    base = "!f() { git show-branch -a 2> /dev/null | grep '\\*' | grep -v $(git rev-parse --abbrev-ref HEAD) | head -n1 | sed -e 's/.*\\[\\(.*\\)\\].*/\\1/' -e 's/[\\^~].*//' -e 's,origin/,,'; }; f"
