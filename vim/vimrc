" Load plugins in vim/bundle
execute pathogen#infect()
execute pathogen#helptags()

"
" Common
"

filetype plugin indent on
syntax on

set nocompatible
set background=dark
set magic
set ruler                           " affiche la position du curseur en bas droite
set showmode                        " affiche le mode (insert ou autre)
set laststatus=2
set number
set cursorline
set t_Co=256
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set backspace=indent,eol,start      " activation de la touche backspace
set ai                              " autoindentation active
set sm                              " syntax match: soulignement d'une parenth e associ ,...
set hlsearch                        " colorisation de la recherche
set ts=4                            " taille des tabulations
set sw=4                            " taille des indentations
set tw=0                            " textwidth: largeur du texte (commentaires) 0=pas de limite
set expandtab                       " converti les tab en espaces
set directory=/tmp
set wildmode=longest,list,full      " vim bar autocomplete
set wildmenu
set smartindent
set autoread                        " Set vim to update autmatically when a file's read-only state is changed
set undodir=~/.cache/vim/undodir
set undofile                        " Persistent undo
set undolevels=10000                " maximum number of changes that can be undone
set undoreload=100000               " maximum number lines to save for undo on a buffer reload
set history=1000                    " remember more commands and search history
set nobackup                        " no backup or swap file, live dangerously
set noswapfile                      " swap files give annoying warning
set clipboard^=unnamedplus,unnamed  " send yank to system clipboard
"
" Plugins configuration
"

" Neovim / Python plugins
" pip install neovim; pip3 install neovim
" Can also be in a virtualenv
let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'

" Autocompletion - NCM2
autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=menuone,noselect,noinsert
set shortmess+=c
set pumheight=10
" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
inoremap <c-c> <ESC>
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')

let ncm2#popup_delay = 5
let ncm2#complete_length = [[1, 1]]
let g:ncm2#matcher = 'substrfuzzy'

" Python - jedi-vim  (autocompletion disabled)
let g:jedi#auto_initialization = 1
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0
let g:jedi#popup_on_dot = 0
let g:jedi#completions_command = ""
let g:jedi#show_call_signatures = "1"
let g:jedi#goto_command = "<C-]>"
let g:jedi#usages_command = "]"
let g:jedi#documentation_command = "?"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"

" Jedi force python version
python << endpython
import sys
import vim

def force_python_version():
    file_path = vim.eval("expand('%:p:h')")
    for python_path in sys.path:
        if python_path in file_path:
            # we are in a python2 dir
            vim.command("let g:jedi#force_py_version = 2")
            # print("JEDI version forced to python2")
            return
    # Default behavior
    vim.command("let g:jedi#force_py_version = 'auto'")
endpython

function! ForcePythonVersion()
    python force_python_version()
endfunction

autocmd BufEnter *.py call ForcePythonVersion()

" gruvbox theme
let g:gruvbox_bold = 0
let g:gruvbox_italic = 1
let g:gruvbox_termcolors = 256
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_contrast_light = 'medium'
let g:gruvbox_italicize_comments = 1
let g:gruvbox_italicize_strings = 1
let g:gruvbox_improved_strings = 0
let g:gruvbox_improved_warnings = 1
colorscheme gruvbox

" override colorscheme config
hi WildMenu     ctermbg=208 ctermfg=16
hi Search       ctermfg=red ctermbg=black   cterm=bold,underline
hi CursorLine   ctermbg=233 term=bold       cterm=bold
hi DiffAdd      ctermbg=235 ctermfg=108     cterm=reverse
hi DiffChange   ctermbg=235 ctermfg=103     cterm=reverse
hi DiffDelete   ctermbg=235 ctermfg=131     cterm=reverse
hi DiffText     ctermbg=235 ctermfg=208     cterm=reverse
hi Directory    ctermfg=12
hi NERDTreeOpenable ctermfg=88
hi NERDTreeClosable ctermfg=9

" lightline
let g:lightline = {
\   'colorscheme': 'wombat',
\   'active': {
\       'left': [
\           [ 'mode', 'paste' ],
\           [ 'gitrepo' ],
\           [ 'readonly', 'filename', 'modified', 'tagbar' ],
\       ],
\      'right': [
\           [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ],
\           [ 'percent' ],
\           [ 'fileformat', 'fileencoding', 'filetype' ],
\       ],
\   },
\   'component': {
\       'tagbar': '%{tagbar#currenttag("%s", "", "f")}',
\       'gitrepo': '%{g:lightline_git_info}',
\    },
\   'component_expand': {
\       'linter_checking': 'lightline#ale#checking',
\       'linter_warnings': 'lightline#ale#warnings',
\       'linter_errors': 'lightline#ale#errors',
\       'linter_ok': 'lightline#ale#ok',
\    },
\   'component_type': {
\       'linter_checking': 'left',
\       'linter_warnings': 'warning',
\       'linter_errors': 'error',
\       'linter_ok': 'left',
\   }
\}

" lightline-ale
let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_warnings = "\uf071  "
let g:lightline#ale#indicator_errors = "\uf05e  "
let g:lightline#ale#indicator_ok = "\uf00c "

" Ale
let g:ale_lint_on_enter = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter%] [%code%] %s [%severity%]'
let g:ale_linters = {
\   'python': ['flake8'],
\   'go': ['go', 'golint', 'gofmt'],
\}
" Ale autofix
let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}

" Nerdtree + Nerdtree tabs
let g:nerdtree_tabs_open_on_console_startup = 0
let g:nerdtree_tabs_focus_on_files = 1
let g:nerdtree_tabs_autofind = 1
let NERDTreeQuitOnOpen = 1
let NERDTreeShowBookmarks = 1
let g:NERDTreeWinSize = 40
let NERDTreeIgnore = ['\.pyc', '__pycache__', '.egg-info[[dir]]', 'pip-wheel-metadata[[dir]]']
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Ultisnip
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<Right>"
let g:UltiSnipsJumpBackwardTrigger = "<Left>"

" Indent Line
let g:indentLine_enabled = 1
let g:indentLine_char = '‚ñè'

" vim-go
let g:go_version_warning = 0
let g:go_def_mapping_enabled = 0
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_fmt_command = "goimports"  "Auto :GoImports

" Fzf
" This is the default extra key bindings
let g:fzf_action = {
\   'ctrl-t': 'tab split',
\   'ctrl-x': 'split',
\   'ctrl-v': 'vsplit'
\ }

let g:fzf_layout = { 'down': '~40%' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" map FZF :Ag  to silversearcher-ag
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '-i -U --nogroup --column --color --color-path="0;38;5;202" --color-line-number="0" --color-match="1;33" -p ~/.agignore -f', <bang>0)

" Autoclose
let g:AutoClosePreserveDotReg = 0

" Gutentag / ctags/cscope
let g:gutentags_cache_dir = '~/.cache/vim/tags'
let g:gutentags_exclude_project_root = []
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['.project']
let g:gutentags_resolve_symlinks = 1
let g:gutentags_modules = ['ctags', 'cscope']
let g:gutentags_file_list_command = 'find . -type f -name "*py" -not -path "*/\.*" -follow'
let g:gutentags_ctags_extra_args = ['--fields=+nl']
" debug
"let g:gutentags_trace = 1
"let g:gutentags_debug = 1

" Startify
let g:startify_fortune_use_unicode = 1
let g:startify_session_dir = '~/.cache/vim/session'
let g:startify_session_persistence = 1
let g:startify_session_before_save = [
\   'echo "Cleaning up before saving.."',
\   'silent! NERDTreeTabsClose'
\ ]

" python-syntax
let g:python_highlight_all = 1

" Comfortable motion
let g:comfortable_motion_no_default_key_mappings = 1
let g:comfortable_motion_interval = 1000.0 / 60
let g:comfortable_motion_friction = 80.0
let g:comfortable_motion_air_drag = 4.0
let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.
noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
nnoremap <silent> <M-Down> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
nnoremap <silent> <M-Up> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>

" ListToggle
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>q'
let g:lt_height = 10

" Signify
let g:signify_update_on_bufenter    = 0
let g:signify_update_on_focusgained = 1


"
" Commands mapping
"

" Remap some common typos
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

" Mapping
let mapleader = " "
map <silent> <leader>V :tabedit $MYVIMRC <cr>
map <silent> <leader>S :source $MYVIMRC \| :echo $MYVIMRC 'reloaded' <cr>
map <silent> <F1> :set paste! <cr>
map <silent> <F2> :set number! <cr>
map <silent> <F3> :NERDTreeTabsToggle <cr>
map <silent> <F4> :TagbarToggle <cr>
map <silent> <F5> :IndentLinesToggle <cr>
map <silent> <F6> :SignifyToggle <cr>
map <silent> <F11> :2,$s/^\s*pick/fixup/g <cr>
map <silent> <F12> :call ToggleMouse() <cr>
map <silent> <leader>a :execute 'Ag' expand('<cword>') <cr>
map <silent> <leader>s :Ag <cr>
map <silent> <leader>f :Files <cr>
map <silent> <leader>b :Buffers <cr>
map <silent> <leader>d :Lines <cr>
map <silent> <leader>D :BLines <cr>
map <silent> <leader>t :Tags <cr>
map <silent> <leader>T :BTags <cr>
map <silent> <leader>c :Commits <cr>
map <silent> <leader>C :BCommits <cr>
map <silent> <leader>h :History <cr>
map <silent> <C-a> ^
map <silent> <C-e> $
map <silent> <C-Right> w
map <silent> <C-Left> b
map <silent> <leader>v :vsplit<cr>
map <silent> <leader>x :split <cr>
map <silent> <C-S-Up> :wincmd k<cr>
map <silent> <C-S-Down> :wincmd j<cr>
map <silent> <C-S-Right> :wincmd l<cr>
map <silent> <C-S-Left> :wincmd h<cr>
map <silent> <leader><Up> :wincmd k<cr>
map <silent> <leader><Down> :wincmd j<cr>
map <silent> <leader><Right> :wincmd l<cr>
map <silent> <leader><Left> :wincmd h<cr>
map <silent> <leader><leader> :noh <cr>
map <silent> <leader><ENTER> :ZoomWinTabToggle <cr>
map <silent> <leader>, <Plug>(ale_previous_wrap)
map <silent> <leader>. <Plug>(ale_next_wrap)

" Always forward with n / backward with N
noremap <expr> n (v:searchforward ? 'n' : 'N')
noremap <expr> N (v:searchforward ? 'N' : 'n')

" Tab
map <C-PageDown> :tabprevious<CR>
map <C-PageUp>   :tabnext<CR>
map <C-t>        :tabnew<CR>

for i in range(1, 9)
    execute "map <leader>" . i . " " . i . "gt"
endfor
map <leader>0 :tablast <cr>

" Tag mapping ctags/cscope
map <silent> <leader>] :execute 'tag' expand('<cword>')<CR>
map <silent> <leader>\ :execute 'tselect' expand('<cword>')<cr>

autocmd bufenter *
\   if exists("b:gutentags_files") |
\       set csto=0 |
\       map <silent> <C-\> :call Cscope_find('0', expand('<cword>')) <CR> |
\   endif

autocmd BufNewFile,BufRead *.lib set filetype=sh
autocmd BufNewFile,BufRead *.pp set filetype=puppet
