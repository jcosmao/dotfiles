execute pathogen#infect()
execute pathogen#helptags()

filetype plugin indent on
syntax on

set nocompatible
set background=dark
set magic
set ruler              " affiche la position du curseur en bas droite
set showmode           " affiche le mode (insert ou autre)
set laststatus=2
set number
set cursorline
set t_Co=256
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set backspace=indent,eol,start  " activation de la touche backspace
set ai                          " autoindentation active
set sm                          " syntax match: soulignement d'une parenth e associ ,...
set hlsearch                    " colorisation de la recherche
set ts=4                        " taille des tabulations
set sw=4                        " taille des indentations
set tw=0                        " textwidth: largeur du texte (commentaires) 0=pas de limite
set expandtab                   " converti les tab en espaces
set directory=/tmp
set wildmode=longest,list,full  " vim bar autocomplete
set wildmenu
set smartindent
set autoread                    " Set vim to update autmatically when a file's read-only state is changed
set undodir=~/.cache/vim/undodir
set undofile                    " Persistent undo
set clipboard+=unnamed

" Remap some common typos
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>


hi Search ctermfg=red ctermbg=black cterm=bold,underline
hi LineNr ctermfg=239 ctermbg=234 cterm=bold
hi CursorLine ctermbg=233 term=bold cterm=bold
hi clear SignColumn " SignColumn should match background

let g:CSApprox_hook_post = ['hi clear SignColumn']

" vimdiff
hi DiffAdd          ctermbg=235  ctermfg=108  cterm=reverse
hi DiffChange       ctermbg=235  ctermfg=103  cterm=reverse
hi DiffDelete       ctermbg=235  ctermfg=131  cterm=reverse
hi DiffText         ctermbg=235  ctermfg=208  cterm=reverse

let g:lightline = {
\    'colorscheme': 'seoul256',
\    'active': {
\      'left': [ [ 'mode', 'paste' ],
\                [ 'gitrepo' ],
\                [ 'readonly', 'filename', 'modified', 'tagbar' ] ],
\    },
\    'component': {
\      'tagbar': '%{tagbar#currenttag("%s", "", "f")}',
\      'gitrepo': '%{g:lightline_git_info}',
\    },
\ }

" gruvbox
let g:gruvbox_bold = 0
let g:gruvbox_italic = 1
let g:gruvbox_termcolors = 256
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_contrast_light = 'medium'
let g:gruvbox_italicize_comments = 1
let g:gruvbox_italicize_strings = 1
let g:gruvbox_improved_strings = 0
let g:gruvbox_improved_warnings = 1
colorscheme gruvbox

" Color cmdline
hi WildMenu ctermfg=208

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8']
"let g:syntastic_python_flake8_args='--ignore=E501,F821'
let g:syntastic_go_checkers = ['go', 'golint', 'gofmt']

" Nerdtree + Nerdtree tabs
let g:nerdtree_tabs_open_on_console_startup = 0
let NERDTreeQuitOnOpen = 1
let NERDTreeShowBookmarks = 1
let g:NERDTreeWinSize = 40
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Ultisnip
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<Right>"
let g:UltiSnipsJumpBackwardTrigger = "<Left>"

" YCM
let g:ycm_key_list_select_completion = ['<tab>', '<Down>']
let g:ycm_key_list_previous_completion = ['<s-tab>', '<Up>']
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 0


" Indent Line
let g:indentLine_enabled = 0
let g:indentLine_char = '‚ñè'

" vim-go
let g:go_version_warning = 0
" do not override ctrl-c
let g:go_def_mapping_enabled = 0
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
" Auto :GoImports
let g:go_fmt_command = "goimports"

" Fzf Configuration

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" In Neovim, you can set up fzf window using a Vim command
" let g:fzf_layout = { 'window': 'enew' }
" let g:fzf_layout = { 'window': '-tabnew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--ignore tags --nogroup --column --color --color-path="0;38;5;202" --color-line-number="0" --color-match="1;33" -f', <bang>0)

" Autoclose
let g:AutoClosePreserveDotReg = 0

" Gutentag / ctags/cscope
let g:gutentags_cache_dir = '~/.cache/vim/tags'
let g:gutentags_file_list_command = 'find . -type f -name *py'
let g:gutentags_exclude_project_root = [ $HOME ]
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['.project']
let g:gutentags_resolve_symlinks = 1
let g:gutentags_modules = ['ctags', 'cscope']

" Startify
let g:startify_fortune_use_unicode = 1
let g:startify_session_dir = '~/.cache/vim/session'
let g:startify_session_persistence = 1
let g:startify_session_before_save = [
\   'echo "Cleaning up before saving.."',
\   'silent! NERDTreeTabsClose'
\ ]

autocmd BufNewFile,BufRead *.lib set filetype=sh
autocmd BufNewFile,BufRead *.py set filetype=python
autocmd BufNewFile,BufRead *.pp set filetype=puppet
autocmd BufWritePre <buffer> :%s/\s\+$//e

" Mapping
let mapleader = ","
map <silent> <F1> :set paste! <cr>
map <silent> <F2> :set number! <cr>
map <silent> <F3> :NERDTreeTabsToggle <cr>
map <silent> <F4> :TagbarOpenAutoClose <cr>
map <silent> <F5> :IndentLinesToggle <cr>
map <silent> <C-f> :Ag <cr>
map <silent> <leader>f :Files <cr>
map <silent> <leader>b :Buffers <cr>
map <silent> <leader>l :Lines <cr>
map <silent> <leader>L :BLines <cr>
map <silent> <leader>t :Tags <cr>
map <silent> <leader>T :BTags <cr>
map <silent> <leader>c :Commits <cr>
map <silent> <leader>C :BCommits <cr>
map <silent> <leader>h :History <cr>
map <silent> <F9> :2,$s/^\s*pick/fixup/g <cr>
map <silent> <F10> :%s/\s\+$//e <cr>
map <silent> <F12> :s/\s\+$//e <cr>
map <silent> <C-a> ggvG$
map <silent> <M-Up> 10k
map <silent> <M-Down> 10j
map <silent> <C-Right> w
map <silent> <C-Left> b
map <silent> <bar> :vsplit<cr>
map <silent> <Bslash> :split <cr>
map <silent> <C-S-Up> :wincmd k<cr>
map <silent> <C-S-Down> :wincmd j<cr>
map <silent> <C-S-Right> :wincmd l<cr>
map <silent> <C-S-Left> :wincmd h<cr>
" Tab
map <C-PageDown> :tabprevious<CR>
map <C-PageUp>   :tabnext<CR>
map <C-t>        :tabnew<CR>

" Tag mapping ctags/cscope
map <silent> <leader>\ :ts <cr>
autocmd FileType python map <buffer> <leader>/ :YcmCompleter GetType<CR>
autocmd FileType python map <buffer> <leader>? :YcmCompleter GetDoc<CR>

if has("cscope") && exists("b:gutentags_files")
  set csto=0
  " 0 == ':cs find s <x>'  symbol: find all references to the token under cursor
  map <silent> <C-\> :call Cscope_find('0', expand('<cword>'))<CR>
else
  autocmd FileType python map <buffer> <C-\> :YcmCompleter GoToReferences<CR>
endif
