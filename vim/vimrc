"
" Plugins Install
"

" PlugInstall [name ...] [#threads] 	Install plugins
" PlugUpdate [name ...] [#threads] 	Install or update plugins
" PlugClean[!] 	Remove unused directories (bang version will clean without prompt)
" PlugUpgrade 	Upgrade vim-plug itself
" PlugStatus 	Check the status of plugins
" PlugDiff 	Examine changes from the previous update and the pending changes
" PlugSnapshot[!] [output path] 	Generate script for restoring the current snapshot of the plugins<Paste>

call plug#begin('~/.vim/plug')

" completion / linter
if has('python3') && v:version > 704
    Plug 'roxma/nvim-yarp'
    Plug 'ncm2/ncm2'
    Plug 'ncm2/ncm2-jedi', {'for': 'python'}
    Plug 'ncm2/ncm2-go', {'for': 'go'}
    Plug 'ncm2/ncm2-path'
    Plug 'ncm2/ncm2-ultisnips'
    Plug 'ncm2/ncm2-bufword'
    Plug 'ncm2/ncm2-tagprefix'
    " python completion
    Plug 'davidhalter/jedi-vim', {'for': 'python'}
    Plug 'jcosmao/jedi-vim-pyversion', {'for': 'python'}
    Plug 'numirias/semshi', {'for': 'python', 'do': ':UpdateRemotePlugins'}
    let g:polyglot_disabled = ['python']
    " Go
    Plug 'fatih/vim-go', {'for': 'go'}
    " snippets
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    " lint
    Plug 'w0rp/ale'
else
    " basic vim completion / lint
    Plug 'vim-scripts/VimCompletesMe'
    Plug 'vim-syntastic/syntastic'
endif

" if has('nvim-0.4')
"     Plug 'ncm2/float-preview.nvim'
" endif

" ctags / cscope
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'

Plug 'mhinz/vim-startify'
Plug 'gruvbox-material/vim', {'as': 'gruvbox-material'}
Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'Yggdroot/indentLine'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', {'dir': '~/.fzf',
\                     'do': './install --no-update-rc --key-bindings --completion --xdg; cd  ~/.vim/plug/fzf.vim; patch -p1 -stNr /dev/null < ~/.vim/fzf.vim.patch; true'}
Plug 'yuttie/comfortable-motion.vim'
Plug 'troydm/zoomwintab.vim'
Plug 'Valloric/ListToggle'
Plug 'roxma/vim-paste-easy'
Plug 'roxma/vim-hug-neovim-rpc'  " compat Vim8
Plug 'tpope/vim-sensible'
Plug 'chrisbra/Colorizer'
Plug 'frazrepo/vim-rainbow', {'for': ['python', 'go', 'cpp', 'perl', 'puppet']}
" " breaking change - does not detect root pattern with priority
Plug 'airblade/vim-rooter', {'commit': 'd64f3e04df9914e784508019a1a1f291cbb40bd4'}
Plug 'sheerun/vim-polyglot', {'tag': 'v4.13.0',
\                             'do': 'cd ~/.vim; patch -p1 -stNr /dev/null < ./jinja.patch; true'}

" " git
Plug 'mhinz/vim-signify'
Plug 'APZelos/blamer.nvim', {'do': 'cd ~/.vim; patch -p1 -stNr /dev/null < ./blamer.nvim.patch; true'}
Plug 'rhysd/git-messenger.vim'


call plug#end()

"
" Common
"

set nocompatible
filetype off
filetype plugin indent on
syntax on
set ttyfast                         " Indicate fast terminal conn for faster redraw
set lazyredraw                      " Wait to redraw
set background=dark
set magic
set ruler                           " affiche la position du curseur en bas droite
set showmode                        " affiche le mode (insert ou autre)
set laststatus=2
set number
set cursorline
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set backspace=indent,eol,start      " activation de la touche backspace
set ai                              " autoindentation active
set sm                              " syntax match: soulignement d'une parenth e associ ,...
set hlsearch                        " colorisation de la recherche
set ts=4                            " taille des tabulations
set sw=4                            " taille des indentations
set tw=0                            " textwidth: largeur du texte (commentaires) 0=pas de limite
set expandtab                       " converti les tab en espaces
set directory=/tmp
set wildmode=longest,list,full      " vim bar autocomplete
set wildmenu
set smartindent
set autoread                        " Set vim to update autmatically when a file's read-only state is changed
set undodir=~/.cache/vim/undodir
set undofile                        " Persistent undo
set undolevels=10000                " maximum number of changes that can be undone
set undoreload=100000               " maximum number lines to save for undo on a buffer reload
set history=1000                    " remember more commands and search history
set nobackup                        " no backup or swap file, live dangerously
set noswapfile                      " swap files give annoying warning
set clipboard^=unnamedplus          " send yank to system clipboard
set updatetime=100
set hidden                          " Allow modified hidden buffers
set signcolumn=yes
"
" Plugins Configuration
"

" Neovim / Python plugins
" pip install neovim; pip3 install neovim
" Can also be in a virtualenv
" By default, let nvim choose default python version
" let g:python_host_prog = '/usr/bin/python2'
" let g:python3_host_prog = '/usr/bin/python3'

function! PlugLoaded(name)
    return (
        \ has_key(g:plugs, a:name) &&
        \ isdirectory(g:plugs[a:name].dir))
endfunction

" Autocompletion - NCM2
if PlugLoaded('ncm2')
    autocmd BufEnter * call ncm2#enable_for_buffer()
    set completeopt=menuone,noselect,noinsert
    set shortmess+=c
    set pumheight=10
    " CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
    inoremap <c-c> <ESC>
    inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')
    inoremap <C-space> <C-r>=ncm2#force_trigger()<cr>
    let ncm2#popup_delay = 5
    let ncm2#complete_length = [[1, 1]]
    let g:ncm2#matcher = 'substrfuzzy'
endif

" Python - jedi-vim  (autocompletion disabled)
let g:jedi#auto_initialization = 1
let g:jedi#show_call_signatures = 0
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0
let g:jedi#popup_on_dot = 1
let g:jedi#completions_command = ""
let g:jedi#goto_command = "<C-]>"
let g:jedi#goto_stubs_command = ""
let g:jedi#goto_assignments_command = ""
let g:jedi#usages_command = "]"
let g:jedi#documentation_command = "?"
let g:jedi#rename_command = "<leader>r"
autocmd Filetype python nmap <C-]> call jedi#goto()

" gruvbox theme
set termguicolors
set background=dark
let g:gruvbox_material_disable_italic_comment = 0
let g:gruvbox_material_enable_bold = 1
let g:gruvbox_material_enable_italic = 1
let g:gruvbox_material_visual = 'grey background'
let g:gruvbox_material_menu_selection_background = 'green'
" available: material / mix / original
let g:gruvbox_material_palette = 'mix'
let g:gruvbox_material_background = 'soft'

colorscheme gruvbox-material

" override colorscheme config
hi WildMenu         ctermbg=208 ctermfg=16
hi Search           ctermfg=red ctermbg=black   cterm=bold,underline    guifg=#E95E1B   guibg=black     gui=bold,underline
hi CursorLine       ctermbg=233 term=bold       cterm=bold              guibg=#121212   gui=bold
hi DiffAdd          ctermbg=235 ctermfg=108     cterm=reverse           guibg=#262626   guifg=#87AF87   gui=reverse
hi DiffChange       ctermbg=235 ctermfg=103     cterm=reverse           guibg=#262626   guifg=#8787AF   gui=reverse
hi DiffDelete       ctermbg=235 ctermfg=131     cterm=reverse           guibg=#262626   guifg=#AF5F5F   gui=reverse
hi DiffText         ctermbg=235 ctermfg=208     cterm=reverse           guibg=#262626   guifg=#FF8700   gui=reverse
hi Directory        ctermfg=12  guifg=#83A598
hi NERDTreeOpenable ctermfg=88  guifg=#870000
hi NERDTreeClosable ctermfg=9   guifg=#FB4934

let s:palette = g:lightline#colorscheme#gruvbox_material#palette
let s:palette.tabline.tabsel = [ [ '#282828', '#98971a', 238, 10, 'bold' ] ]
unlet s:palette

" lightline
let g:lightline = {
\   'colorscheme': 'gruvbox_material',
\   'active': {
\       'left': [
\           [ 'mode', 'paste' ],
\           [ 'gitrepo' ],
\           [ 'readonly', 'filename', 'modified', 'tagbar' ],
\       ],
\      'right': [
\           [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ],
\           [ 'percent' ],
\           [ 'fileformat', 'fileencoding', 'filetype' ],
\       ],
\   },
\   'component': {
\       'tagbar': '%{tagbar#currenttag("%s", "", "f")}',
\       'gitrepo': '%{g:lightline_git_info}',
\    },
\   'component_expand': {
\       'linter_checking': 'lightline#ale#checking',
\       'linter_warnings': 'lightline#ale#warnings',
\       'linter_errors': 'lightline#ale#errors',
\       'linter_ok': 'lightline#ale#ok',
\    },
\   'component_type': {
\       'linter_checking': 'left',
\       'linter_warnings': 'warning',
\       'linter_errors': 'error',
\       'linter_ok': 'left',
\   },
\   'tab': {
\       'active': [ 'tabnum', 'filename', 'modified' ],
\       'inactive': [ 'tabnum', 'filename', 'modified' ]
\   }
\}

" lightline-ale
let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_warnings = "\uf071  "
let g:lightline#ale#indicator_errors = "\uf05e  "
let g:lightline#ale#indicator_ok = "\uf00c "

" Ale
let g:ale_lint_on_enter = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter%] [%code%] %s [%severity%]'
let g:ale_linters = {
\   'python': ['flake8'],
\   'yaml': ['yamllint'],
\   'go': ['gometalinter', 'gofmt'],
\}
" Ale autofix
let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_go_checkers = ['go', 'golint', 'gofmt']
let g:syntastic_error_symbol = ''
let g:syntastic_warning_symbol = ''
let g:syntastic_style_error_symbol = ''
let g:syntastic_style_warning_symbol = ''
" By default, disable style checks
let g:syntastic_quiet_messages = {
\   "level": [],
\   "type":  ["style"],
\ }

if PlugLoaded('syntastic')
    autocmd BufWritePre * :%s/\s\+$//e
endif

" Nerdtree
let NERDTreeQuitOnOpen = 1
let NERDTreeShowHidden = 1
let NERDTreeShowBookmarks = 1
let NERDTreeWinSize = 40
let NERDTreeIgnore = ['.git[[dir]]', '.swp', '.pyc', '__pycache__', '.egg-info[[dir]]', 'pip-wheel-metadata[[dir]]']

" Ultisnip
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<Right>"
let g:UltiSnipsJumpBackwardTrigger = "<Left>"

" Indent Line
let g:indentLine_enabled = 1
let g:indentLine_char = '▏'

" vim-go
let g:go_debug = ['shell-commands']
let g:go_fmt_command = "goimports"  "Auto :GoImports
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_def_mapping_enabled = 0

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

" guru, godef, gopls
let g:go_def_mode = 'gopls'
autocmd Filetype go nmap <C-]> <Plug>(go-def)

" Fzf
" This is the default extra key bindings
let g:fzf_action = {
\   'ctrl-t': 'tab split',
\   'ctrl-x': 'split',
\   'ctrl-v': 'vsplit'
\ }

let g:fzf_layout = { 'down': '~40%' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" map FZF :Ag  to silversearcher-ag
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(
  \   <q-args>, '-i -U --nogroup --column --color --color-path="0;38;5;202" --color-line-number="0" --color-match="1;33" -p ~/.agignore -f',
  \   <bang>0)

" ripgrep https://github.com/BurntSushi/ripgrep
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case --ignore-file ~/.agignore '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Autoclose
let g:AutoClosePreserveDotReg = 0

" Vim rooter
let g:rooter_patterns = ['.project/', '.project', '.git']
let g:rooter_resolve_links = 1

" Gutentag / ctags/cscope
let g:gutentags_project_root = ['.project']         " create .project dir in project root dir to build tags automatically
let g:gutentags_exclude_project_root = []
let g:gutentags_exclude_filetypes = []
let g:gutentags_add_default_project_roots = 0
let g:gutentags_resolve_symlinks = 1
let g:gutentags_modules = ['ctags', 'cscope']
let g:gutentags_ctags_executable = '~/.local/bin/ctags'
let g:gutentags_ctags_extra_args = ['--fields=+niaSszt --extras=+q --python-kinds=-vi --tag-relative=yes']
let g:gutentags_file_list_command = 'find . -type f -regextype posix-egrep -regex ".*\.(py|go|pl|inc|pm|sh|lib|pp)$" -not -path "*/\.*" -follow'
let g:gutentags_enabled_user_func = 'GutentagsEnableFunc'
let g:gutentags_scopefile = '.cscope.gutentags'
let g:gutentags_ctags_tagfile = '.ctags.gutentags'

function! GutentagsEnableFunc(path)
    let file_ext = fnamemodify(a:path, ':e')
    let allowed_file_ext = ['py', 'go', 'pl', 'inc', 'pm', 'sh', 'lib', 'pp']
    if (index(allowed_file_ext, file_ext) >= 0) | return 1 | else | return 0 | endif
endfunction

" tagbar
let g:tagbar_map_showproto = '\'
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_previewwin_pos = "aboveleft"
let g:tagbar_autopreview = 0
let g:tagbar_ctags_bin = '~/.local/bin/ctags'

" debug
" let g:gutentags_trace = 1
" let g:gutentags_debug = 1

" Startify
let g:startify_fortune_use_unicode = 1
let g:startify_session_dir = '~/.cache/vim/session'
let g:startify_session_persistence = 1
let g:startify_session_before_save = [
\   'echo "Cleaning up before saving.."',
\   'silent! NERDTreeTabsClose',
\   'silent! NERDTreeClose',
\   'silent! TagbarClose',
\ ]
let g:startify_bookmarks = []
let g:startify_lists = [
\ { 'type': 'sessions',  'header': ['   Sessions']       },
\ { 'type': 'files',     'header': ['   Files']            },
\ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
\ ]

" python-syntax
let g:python_highlight_all = 1

" Comfortable motion
let g:comfortable_motion_no_default_key_mappings = 1
let g:comfortable_motion_interval = 1000.0 / 60
let g:comfortable_motion_friction = 80.0
let g:comfortable_motion_air_drag = 4.0
let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.
noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
nnoremap <silent> <M-Down> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
nnoremap <silent> <M-Up> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>

" ListToggle
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>q'
let g:lt_height = 10

" Signify
let g:signify_update_on_bufenter    = 1
let g:signify_update_on_focusgained = 0
" refresh when vim-fugitive command is used
" (add silent! to ignore error: https://github.com/mhinz/vim-signify/issues/270)
autocmd User Fugitive silent! SignifyRefresh
autocmd User Fugitive silent! TagbarClose

let g:blamer_template = '| <commit-short> | <committer> • <committer-time> • <summary>'
let g:blamer_date_format = '%d/%m/%y'
let g:blamer_delay = 500

" vim-json
let g:vim_json_syntax_conceal = 0

" vim-rainbow
let g:rainbow_active = 1


"
" Commands mapping
"

" Remap some common typos
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

" Mapping
let mapleader = " "
map <silent> <leader>? :exec printf('view %s/help.md', fnamemodify(expand($MYVIMRC), ':p:h'))<cr>
map <silent> <leader>V :tabedit $MYVIMRC <cr>
map <silent> <leader>S :source $MYVIMRC \| :echo $MYVIMRC 'reloaded' <cr>
map <silent> <F1> :set paste! <cr>
map <silent> <F2> :set number! <cr>
map <silent> <F3> :call NERDTreeToggle() <cr>
map <silent> <F4> :IndentLinesToggle <cr>
map <silent> <F5> :TagbarToggle <cr>
map <silent> <F7> :SignifyToggle <cr>
map <silent> <F8> :BlamerToggle <cr>
map <silent> <F11> :2,$s/^\s*pick/fixup/g <cr>
map <silent> <F12> :call ToggleMouse() <cr>
map <silent> <leader>a :execute 'Rg' expand('<cword>') <cr>
map <silent> <leader>s :Rg <cr>
map <silent> <leader>f :Files <cr>
map <silent> <leader>b :Buffers <cr>
map <silent> <leader>d :Lines <cr>
map <silent> <leader>D :BLines <cr>
map <silent> <leader>t :Tags <cr>
map <silent> <leader>T :BTags <cr>
map <silent> <leader>c :BCommits <cr>
map <silent> <leader>h :History <cr>
map <silent> <leader>g :GitMessenger <cr>
map <silent> <C-a> ^
map <silent> <C-e> $
map <silent> <C-Right> e
map <silent> <C-Left> b
map <silent> <leader>v :vsplit<cr>
map <silent> <leader>x :split <cr>
map <silent> <C-S-Up> :wincmd k<cr>
map <silent> <C-S-Down> :wincmd j<cr>
map <silent> <C-S-Right> :wincmd l<cr>
map <silent> <C-S-Left> :wincmd h<cr>
map <silent> <leader><Up> :wincmd k<cr>
map <silent> <leader><Down> :wincmd j<cr>
map <silent> <leader><Right> :wincmd l<cr>
map <silent> <leader><Left> :wincmd h<cr>
map <silent> <leader><leader> :noh <cr>
map <silent> <leader><ENTER> :ZoomWinTabToggle <cr>
map <silent> <leader>, <Plug>(ale_previous_wrap)
map <silent> <leader>. <Plug>(ale_next_wrap)
map <silent> <leader>< <Plug>(signify-prev-hunk)
map <silent> <leader>> <Plug>(signify-next-hunk)

" Always forward with n / backward with N
noremap <expr> n (v:searchforward ? 'n' : 'N')
noremap <expr> N (v:searchforward ? 'N' : 'n')

" Tab
map <C-PageDown> :tabprevious<CR>
map <C-PageUp>   :tabnext<CR>
map <C-t>        :tabnew<CR>

for i in range(1, 9)
    execute "map <leader>" . i . " " . i . "gt"
endfor
map <leader>0 :tablast <cr>

" Tag mapping ctags/cscope
map <silent> <leader>] :execute 'tag' expand('<cword>')<CR>
map <silent> <leader>\ :execute 'tselect' expand('<cword>')<cr>

" For puppet filetype, ctags are not generated with ^::
autocmd FileType puppet nnoremap <C-]> :execute 'tag' trim(expand('<cword>'), '^::')<CR>
autocmd FileType puppet nnoremap <leader>] :execute 'tag' trim(expand('<cword>'), '^::')<CR>

autocmd bufEnter *
\   if exists("b:gutentags_files") |
\       set csto=0 |
\       map <silent> <C-\> :call Cscope_find('0', expand('<cword>')) <CR> |
\   endif

function! PreventBuffersInNERDTree()
  if bufname('#') =~ 'NERD_tree' && bufname('%') !~ 'NERD_tree'
    \ && exists('t:nerdtree_winnr') && bufwinnr('%') == t:nerdtree_winnr
    \ && &buftype == '' && !exists('g:launching_fzf')
    let bufnum = bufnr('%')
    close
    exe 'b ' . bufnum
  endif
  if exists('g:launching_fzf') | unlet g:launching_fzf | endif
endfunction

function! NERDTreeToggle()
    if exists("g:NERDTree") && g:NERDTree.IsOpen()
        NERDTreeClose
    elseif filereadable(expand('%'))
        NERDTreeFind
    else
        NERDTreeCWD
    endif
endfunction

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd FileType nerdtree let t:nerdtree_winnr = bufwinnr('%')
autocmd BufWinEnter * call PreventBuffersInNERDTree()

" autocmd BufWinEnter *
" \   if exists("b:gutentags_files") |
" \       call tagbar#autoopen(0) |
" \   endif

autocmd User StartifyReady
            \ NERDTree | wincmd w

autocmd User StartifyBufferOpened
            \ NERDTreeFind | wincmd w

autocmd VimLeavePre * :execute 'TagbarClose'

" Specific filetype
autocmd BufNewFile,BufRead *.lib set filetype=sh
autocmd BufNewFile,BufRead *.pp set filetype=puppet
autocmd BufNewFile,BufRead *.inc set filetype=perl
