execute pathogen#infect()
execute pathogen#helptags()

filetype plugin indent on
syntax on

set nocompatible
set background=dark
set magic
set ruler              " affiche la position du curseur en bas droite
set showmode           " affiche le mode (insert ou autre)
set laststatus=2
set number
set cursorline
set t_Co=256
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set backspace=indent,eol,start  " activation de la touche backspace
set ai                          " autoindentation active
set sm                          " syntax match: soulignement d'une parenth e associ ,...
set hlsearch                    " colorisation de la recherche
set ts=4                        " taille des tabulations
set sw=4                        " taille des indentations
set tw=0                        " textwidth: largeur du texte (commentaires) 0=pas de limite
set expandtab                   " converti les tab en espaces
set directory=/tmp
set wildmode=longest,list,full  " vim bar autocomplete
set wildmenu
set smartindent
set autoread                    " Set vim to update autmatically when a file's read-only state is changed

" Remap some common typos
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

hi Search ctermfg=red ctermbg=black cterm=bold,underline
hi LineNr ctermfg=239 ctermbg=234 cterm=bold
hi CursorLine ctermbg=233 term=bold cterm=bold
hi clear SignColumn " SignColumn should match background

let g:CSApprox_hook_post = ['hi clear SignColumn']

" vimdiff
hi DiffAdd          ctermbg=235  ctermfg=108  cterm=reverse
hi DiffChange       ctermbg=235  ctermfg=103  cterm=reverse
hi DiffDelete       ctermbg=235  ctermfg=131  cterm=reverse
hi DiffText         ctermbg=235  ctermfg=208  cterm=reverse

let g:lightline = {
    \ 'colorscheme': 'seoul256',
\}

colorscheme gruvbox

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8']

" Nerdtree + Nerdtree tabs
let g:nerdtree_tabs_open_on_console_startup=0
let NERDTreeShowBookmarks=1
let g:NERDTreeWinSize = 40

" Tagbar
let g:tagbar_ctags_bin = '$HOME/.vim/bundle/tagbar/bin/ctags'

" Supertab
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = '<c-n>'
let g:SuperTabNoCompleteAfter = [ '^' , ',' , '\s' , "'" , ':' , ';' ]

" Ultisnip
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsJumpForwardTrigger = "<Right>"
let g:UltiSnipsJumpBackwardTrigger = "<Left>"

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

" Indent Guide
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=234
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236

" Mapping
let mapleader=","
map <silent> <F1> :set paste! <cr>
map <silent> <F2> :set number! <cr>
map <silent> <F3> :NERDTreeTabsToggle <cr>
map <silent> <F4> :TagbarOpenAutoClose <cr>
map <silent> <F5> <Leader>ig
map <silent> <F9> :2,$s/^\s*pick/squash/g <cr>
map <silent> <F10> :%s/\s\+$//e <cr>
map <silent> <F12> :s/\s\+$//e <cr>
map <silent> <C-t> :tabnew <cr>
map <silent> <tab> :tabnext<cr>
map <silent> <S-tab> :tabprevious<cr>
map <silent> <C-a> ggvG$
map <silent> <M-Up> 10k
map <silent> <M-Down> 10j
map <silent> <bar> :vsplit<cr>
map <silent> <Bslash> :split <cr>
map <silent> <C-S-Up> :wincmd k<cr>
map <silent> <C-S-Down> :wincmd j<cr>
map <silent> <C-S-Right> :wincmd l<cr>
map <silent> <C-S-Left> :wincmd h<cr>

autocmd BufNewFile,BufRead *.lib set filetype=sh
autocmd BufNewFile,BufRead *.py set filetype=python
autocmd BufNewFile,BufRead *.pp set filetype=puppet
autocmd BufWritePre <buffer> :%s/\s\+$//e
