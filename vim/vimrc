"
" Plugins Install
"

" PlugInstall [name ...] [#threads] 	Install plugins
" PlugUpdate [name ...] [#threads] 	Install or update plugins
" PlugClean[!] 	Remove unused directories (bang version will clean without prompt)
" PlugUpgrade 	Upgrade vim-plug itself
" PlugStatus 	Check the status of plugins
" PlugDiff 	Examine changes from the previous update and the pending changes
" PlugSnapshot[!] [output path] 	Generate script for restoring the current snapshot of the plugins<Paste>

call plug#begin('~/.vim/plug')

" completion / linter
if has('python3') && v:version > 704
    Plug 'roxma/nvim-yarp'
    Plug 'ncm2/ncm2'
    Plug 'ncm2/ncm2-jedi', {'for': 'python'}
    Plug 'ncm2/ncm2-go', {'for': 'go'}
    Plug 'ncm2/ncm2-pyclang', {'for': ['c','cpp']}
    Plug 'ncm2/ncm2-path'
    Plug 'ncm2/ncm2-ultisnips' | Plug 'SirVer/ultisnips'
    Plug 'ncm2/ncm2-bufword'
    Plug 'ncm2/ncm2-tagprefix'
    Plug 'ncm2/ncm2-syntax' | Plug 'Shougo/neco-syntax'
    Plug 'ncm2/ncm2-neoinclude' | Plug 'Shougo/neoinclude.vim'

    " python completion
    Plug 'davidhalter/jedi-vim', {'for': 'python'}

    " create .python{version} at the root project dir to force jedi to use
    " this python version (useful to jump module from python path when there
    " is both python2/3 in system)
    Plug 'jcosmao/jedi-vim-pyversion', {'for': 'python'}

    " python syntax hilight
    Plug 'numirias/semshi', {'for': 'python', 'do': ':UpdateRemotePlugins'}
    " let g:polyglot_disabled = ['python']
    " Go
    Plug 'fatih/vim-go', {'for': 'go'}
    " snippets
    Plug 'honza/vim-snippets'
    " lint
    Plug 'w0rp/ale'
else
    " basic vim completion / lint
    Plug 'vim-scripts/VimCompletesMe'
    Plug 'vim-syntastic/syntastic'
endif

" ctags / cscope
Plug 'ludovicchabant/vim-gutentags', {'do': 'cd  ~/.vim/plug/vim-gutentags; patch -p1 -stNr /dev/null < ~/.vim/vim-gutentags.patch; true'}
Plug 'preservim/tagbar'

Plug 'mhinz/vim-startify'
Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'Yggdroot/indentLine'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', {'dir': '~/.fzf',
\                     'do': './install --no-update-rc --key-bindings --completion --xdg; cd  ~/.vim/plug/fzf.vim; patch -p1 -stNr /dev/null < ~/.vim/fzf.vim.patch; true'}
Plug 'chengzeyi/fzf-preview.vim'
Plug 'yuttie/comfortable-motion.vim'
Plug 'troydm/zoomwintab.vim'
Plug 'Valloric/ListToggle'
Plug 'roxma/vim-paste-easy'
Plug 'tpope/vim-sensible'
Plug 'chrisbra/Colorizer'
Plug 'junegunn/rainbow_parentheses.vim'
" " breaking change - does not detect root pattern with priority
Plug 'airblade/vim-rooter', {'commit': 'd64f3e04df9914e784508019a1a1f291cbb40bd4'}
Plug 'sheerun/vim-polyglot', {'tag': 'v4.13.0',
\                             'do': 'cd ~/.vim; patch -p1 -stNr /dev/null < ./jinja.patch; true'}

" " git
Plug 'mhinz/vim-signify'
Plug 'rhysd/git-messenger.vim'

" Colorscheme
Plug 'sainnhe/gruvbox-material'
Plug 'sainnhe/everforest'
Plug 'sainnhe/edge'
Plug 'rafamadriz/neon'
Plug 'sainnhe/sonokai'

" nvim 0.5
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

call plug#end()

"
" Common
"


set nocompatible
filetype off
filetype plugin indent on
syntax on
set ttyfast                         " Indicate fast terminal conn for faster redraw
set lazyredraw                      " Wait to redraw
set background=dark
set magic
set ruler                           " affiche la position du curseur en bas droite
set showmode                        " affiche le mode (insert ou autre)
set showcmd                         " Show current command.
set laststatus=2
set number
set cursorline
set signcolumn=auto
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set backspace=indent,eol,start      " activation de la touche backspace
set ai                              " autoindentation active
set sm                              " syntax match: soulignement d'une parenth e associ ,...
set hlsearch                        " colorisation de la recherche
set ts=4                            " taille des tabulations
set sw=4                            " taille des indentations
set tw=0                            " textwidth: largeur du texte (commentaires) 0=pas de limite
set expandtab                       " converti les tab en espaces
set directory=/tmp
set wildmode=longest,list,full      " vim bar autocomplete
set wildmenu
set smartindent
set autoread                        " Set vim to update autmatically when a file's read-only state is changed
set undodir=~/.cache/vim/undodir
set undofile                        " Persistent undo
set undolevels=10000                " maximum number of changes that can be undone
set undoreload=100000               " maximum number lines to save for undo on a buffer reload
set history=1000                    " remember more commands and search history
set nobackup                        " no backup or swap file, live dangerously
set noswapfile                      " swap files give annoying warning
set clipboard^=unnamedplus          " send yank to system clipboard
set updatetime=100
set hidden                          " Allow modified hidden buffers
set nofoldenable                    " Folding makes things unreadable.
set noautochdir


"
" Plugins Configuration
"

" Neovim / Python plugins
" pip install neovim; pip3 install neovim
" Can also be in a virtualenv
" By default, let nvim choose default python version
" let g:python_host_prog = '/usr/bin/python2'
" let g:python3_host_prog = '/usr/bin/python3'

function! PlugLoaded(name)
    return (
        \ has_key(g:plugs, a:name) &&
        \ isdirectory(g:plugs[a:name].dir))
endfunction

" gruvbox theme
set termguicolors
set background=dark

let g:gruvbox_material_disable_italic_comment = 0
let g:gruvbox_material_enable_bold = 1
let g:gruvbox_material_enable_italic = 1
let g:gruvbox_material_visual = 'grey background'
let g:gruvbox_material_menu_selection_background = 'green'
" available: material / mix / original
let g:gruvbox_material_palette = 'mix'
" available: soft / medium / hard
let g:gruvbox_material_background = 'medium'

" available: soft / medium / hard
let g:everforest_background = 'hard'
let g:everforest_enable_italic = 1
let g:everforest_disable_italic_comment = 1

" available: edge(default), aura, neon
let g:edge_style = 'neon'
let g:edge_enable_italic = 1
let g:edge_disable_italic_comment = 1

" Available values: `'default'`, `'atlantis'`, `'andromeda'`, `'shusia'`, `'maia'`, `'espresso'`
let g:sonokai_style = 'espresso'
let g:sonokai_enable_italic = 1
let g:sonokai_disable_italic_comment = 1

" available: default, doom, dark, light
let g:neon_style = "doom"
let g:neon_italic_keyword = 1
let g:neon_italic_function = 1
let g:neon_transparent = 1

" available: gruvbox-material, edge, everforest, sonokai
colorscheme gruvbox-material

" override colorscheme config
hi WildMenu         ctermbg=208 ctermfg=16
hi Search           ctermfg=red ctermbg=black   cterm=bold,underline    guifg=#E95E1B   guibg=black     gui=bold,underline
hi CursorLine       ctermbg=233 term=bold       cterm=bold              guibg=#121212   gui=bold
hi DiffAdd          ctermbg=235 ctermfg=108     cterm=reverse           guibg=#262626   guifg=#87AF87   gui=reverse
hi DiffChange       ctermbg=235 ctermfg=103     cterm=reverse           guibg=#262626   guifg=#8787AF   gui=reverse
hi DiffDelete       ctermbg=235 ctermfg=131     cterm=reverse           guibg=#262626   guifg=#AF5F5F   gui=reverse
hi DiffText         ctermbg=235 ctermfg=208     cterm=reverse           guibg=#262626   guifg=#FF8700   gui=reverse
hi Directory        ctermfg=12  guifg=#83A598
hi NERDTreeOpenable ctermfg=88  guifg=#870000
hi NERDTreeClosable ctermfg=9   guifg=#FB4934

" override semshi colorscheme
hi semshiParameter  ctermfg=109 guifg=#83a598
hi semshiImported   ctermfg=210 guifg=#ff9741
hi semshiGlobal     ctermfg=214 guifg=#ffc649

" override tagbar colorscheme
hi default TagbarAccessPublic    guifg=Green     ctermfg=Green
hi default TagbarAccessProtected guifg=White     ctermfg=White
hi default TagbarAccessPrivate   guifg=Red       ctermfg=Red

" Fix missing tree-sitter binding on colorscheme (gruvbox_material)
autocmd FileType sh :highlight! link TSVariable Blue
autocmd FileType sh :highlight! link TSConstant Blue

let s:palette = g:lightline#colorscheme#gruvbox_material#palette
let s:palette.tabline.tabsel = [ [ '#282828', '#98971a', 238, 10, 'bold' ] ]
unlet s:palette

" lightline
let g:lightline = {
\   'colorscheme': 'gruvbox_material',
\   'active': {
\       'left': [
\           [ 'mode', 'paste' ],
\           [ 'gitrepo' ],
\           [ 'readonly', 'filename', 'modified', 'tagbar' ],
\       ],
\      'right': [
\           [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ],
\           [ 'percent' ],
\           [ 'fileformat', 'fileencoding', 'filetype' ],
\       ],
\   },
\   'component': {
\       'tagbar': '%{tagbar#currenttag("%s", "", "f")}',
\       'gitrepo': '%{g:lightline_git_info}',
\    },
\   'component_expand': {
\       'linter_checking': 'lightline#ale#checking',
\       'linter_warnings': 'lightline#ale#warnings',
\       'linter_errors': 'lightline#ale#errors',
\       'linter_ok': 'lightline#ale#ok',
\    },
\   'component_type': {
\       'linter_checking': 'left',
\       'linter_warnings': 'warning',
\       'linter_errors': 'error',
\       'linter_ok': 'left',
\   },
\   'tab': {
\       'active': [ 'tabnum', 'filename', 'modified' ],
\       'inactive': [ 'tabnum', 'filename', 'modified' ]
\   }
\}

" Autoset lightline colorsheme (except gruvbox-material which does not match)
if colors_name == 'gruvbox-material'
    let g:lightline.colorscheme = 'gruvbox_material'
elseif colors_name == 'neon'
    let g:lightline.colorscheme = 'edge'
else
    let g:lightline.colorscheme = colors_name
endif

" lightline-ale
let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_warnings = "\uf071  "
let g:lightline#ale#indicator_errors = "\uf05e  "
let g:lightline#ale#indicator_ok = "\uf00c "

" Autocompletion - NCM2
if PlugLoaded('ncm2')
    autocmd BufEnter * call ncm2#enable_for_buffer()
    set completeopt=menuone,noinsert,noselect
    set shortmess+=c
    set pumheight=20

    " inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
    inoremap <expr> <C-c> pumvisible() ? "\<C-e>" : "\<C-c>"
    inoremap <expr> <Tab> pumvisible() ? "\<Down>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<Up>" : "\<S-Tab>"
    inoremap <expr> <M-Down> pumvisible() ? "\<PageDown>" : "\<M-Down>"
    inoremap <expr> <M-Up> pumvisible() ? "\<PageUp>" : "\<M-Up>"
    inoremap <silent> <expr> <CR> (pumvisible() ? ncm2_ultisnips#expand_or("", 'n') : "\<CR>")

    let g:ncm2#manual_complete_length = [[1,1]]
    inoremap <C-space> <C-r>=ncm2#manual_trigger()<cr>

    let ncm2#popup_delay = 5
    " let ncm2#complete_length = [[1, 1]]
    let ncm2#complete_length = [[1,3],[7,2]]
    call ncm2#override_source('bufword', {'priority': 7})
    let g:ncm2#matcher = 'substrfuzzy'
    let g:ncm2_look_enabled = 1
endif

" Ale
let g:ale_lint_on_enter = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter%] [%code%] %s [%severity%]'
let g:ale_linters = {
\   'python': ['flake8'],
\   'yaml': ['yamllint'],
\   'go': ['gometalinter', 'gofmt'],
\}
" Ale autofix
let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_go_checkers = ['go', 'golint', 'gofmt']
let g:syntastic_error_symbol = ''
let g:syntastic_warning_symbol = ''
let g:syntastic_style_error_symbol = ''
let g:syntastic_style_warning_symbol = ''
" By default, disable style checks
let g:syntastic_quiet_messages = {
\   "level": [],
\   "type":  ["style"],
\ }

if PlugLoaded('syntastic')
    autocmd BufWritePre * :%s/\s\+$//e
endif

" Nerdtree
let NERDTreeQuitOnOpen = 1
let NERDTreeShowHidden = 1
let NERDTreeShowBookmarks = 1
let NERDTreeWinSize = 40
let NERDTreeIgnore = ['.git[[dir]]', '.swp', '.pyc', '__pycache__', '.egg-info[[dir]]', 'pip-wheel-metadata[[dir]]']

" Ultisnip
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<Right>"
let g:UltiSnipsJumpBackwardTrigger = "<Left>"

" Indent Line
let g:indentLine_enabled = 1
let g:indentLine_char = '▏'

" vim-go
let g:go_debug = ['shell-commands']
let g:go_fmt_command = "goimports"  "Auto :GoImports
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_def_mapping_enabled = 0

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

" guru, godef, gopls
let g:go_def_mode = 'gopls'

" Startify
let g:startify_change_to_dir = 0
let g:startify_fortune_use_unicode = 1
let g:startify_session_dir = '~/.cache/vim/session'
let g:startify_session_persistence = 1
let g:startify_session_before_save = [
\   'echo "Cleaning up before saving.."',
\   'silent! NERDTreeTabsClose',
\   'silent! NERDTreeClose',
\   'silent! TagbarClose',
\ ]
let g:startify_bookmarks = []
let g:startify_lists = [
\ { 'type': 'sessions',  'header': ['   Sessions']       },
\ { 'type': 'files',     'header': ['   Files']            },
\ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
\ ]

" Comfortable motion
let g:comfortable_motion_no_default_key_mappings = 1
let g:comfortable_motion_interval = 1000.0 / 60
let g:comfortable_motion_friction = 80.0
let g:comfortable_motion_air_drag = 4.0
let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.

" ListToggle
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>q'
let g:lt_height = 10

" Signify
let g:signify_update_on_bufenter    = 1
let g:signify_update_on_focusgained = 0

" refresh when vim-fugitive command is used
" (add silent! to ignore error: https://github.com/mhinz/vim-signify/issues/270)
autocmd User Fugitive silent! SignifyRefresh
autocmd User Fugitive silent! TagbarClose

" vim-json
let g:vim_json_syntax_conceal = 0

" vim-rainbow
let g:rainbow_active = 1

" Semshi
let g:semshi#always_update_all_highlights = 1
let g:semshi#tolerate_syntax_errors = 1

" Treesitter
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  ignore_install = {}, -- List of parsers to ignore installing
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = {},  -- list of language that will be disabled
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
  indent = { enable = true },
  incremental_selection = { enable = true },
}
EOF


"
" Commands mapping
"

" Remap some common typos
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

" Mapping
let mapleader = " "   " Leader key set to <space bar>
map <silent> <leader>? :exec printf('view %s/help.md', fnamemodify(expand($MYVIMRC), ':p:h'))<cr>
map <silent> <leader>V :tabedit $MYVIMRC <cr>
map <silent> <leader>S :source $MYVIMRC \| :echo $MYVIMRC 'reloaded' <cr>
map <silent> <leader><ESC> :set nonumber \| :IndentLinesDisable \| :SignifyDisable <cr>
map <silent> <leader><F1> :set number \| :IndentLinesEnable \| :SignifyEnable <cr>
map <silent> <F1> :call NERDTreeToggle() <cr>
map <silent> <F2> :TagbarToggle <cr>
map <silent> <F3> :IndentLinesToggle <cr>
map <silent> <F4> :set number! <cr>
map <silent> <F5> :SignifyToggle <cr>
map <silent> <F10> :set paste! <cr>
map <silent> <F11> :2,$s/^\s*pick/fixup/g <cr>
map <silent> <F12> :call ToggleMouse() <cr>
map <silent> <leader>a :execute 'Rg' expand('<cword>') <cr>
map <silent> <leader>s :Rg <cr>
map <silent> <leader>f :Files <cr>
map <silent> <leader>b :Buffers <cr>
map <silent> <leader>d :Lines <cr>
map <silent> <leader>D :BLines <cr>
map <silent> <leader>t :FZFCtags <cr>
map <silent> <leader>c :BCommits <cr>
map <silent> <leader>h :History <cr>
map <silent> <leader>g :GitMessenger <cr>
map <silent> <C-a> ^
map <silent> <C-e> $
map <silent> <C-Right> e
map <silent> <C-Left> b
map <silent> <leader>v :vsplit<cr>
map <silent> <leader>x :split <cr>
map <silent> <C-S-Up> :wincmd k<cr>
map <silent> <C-S-Down> :wincmd j<cr>
map <silent> <C-S-Right> :wincmd l<cr>
map <silent> <C-S-Left> :wincmd h<cr>
map <silent> <leader><Up> :wincmd k<cr>
map <silent> <leader><Down> :wincmd j<cr>
map <silent> <leader><Right> :wincmd l<cr>
map <silent> <leader><Left> :wincmd h<cr>
map <silent> <leader><leader> :noh <cr>
map <silent> <leader><ENTER> :ZoomWinTabToggle <cr>
map <silent> <leader>, <Plug>(ale_previous_wrap)
map <silent> <leader>. <Plug>(ale_next_wrap)
map <silent> <leader>< <Plug>(signify-prev-hunk)
map <silent> <leader>> <Plug>(signify-next-hunk)

" comfortable motion mapping
noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
nnoremap <silent> <M-Down> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
nnoremap <silent> <M-Up> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>


" Always forward with n / backward with N
noremap <expr> n (v:searchforward ? 'n' : 'N')
noremap <expr> N (v:searchforward ? 'N' : 'n')

" Tab
map <C-PageDown> :tabprevious<CR>
map <C-PageUp>   :tabnext<CR>
map <C-t>        :tabnew<CR>

for i in range(1, 9)
    execute "map <leader>" . i . " " . i . "gt"
endfor
map <leader>0 :tablast <cr>

" Specific filetype
autocmd BufNewFile,BufRead *.lib set filetype=sh
autocmd BufNewFile,BufRead *.pp set filetype=puppet
autocmd BufNewFile,BufRead *.inc set filetype=perl
