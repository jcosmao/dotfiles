" Load plugins in vim/bundle
execute pathogen#infect()
execute pathogen#helptags()

"
" Common
"

filetype plugin indent on
syntax on

set nocompatible
set background=dark
set magic
set ruler              " affiche la position du curseur en bas droite
set showmode           " affiche le mode (insert ou autre)
set laststatus=2
set number
set cursorline
set t_Co=256
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set backspace=indent,eol,start  " activation de la touche backspace
set ai                          " autoindentation active
set sm                          " syntax match: soulignement d'une parenth e associ ,...
set hlsearch                    " colorisation de la recherche
set ts=4                        " taille des tabulations
set sw=4                        " taille des indentations
set tw=0                        " textwidth: largeur du texte (commentaires) 0=pas de limite
set expandtab                   " converti les tab en espaces
set directory=/tmp
set wildmode=longest,list,full  " vim bar autocomplete
set wildmenu
set smartindent
set autoread                    " Set vim to update autmatically when a file's read-only state is changed
set undodir=~/.cache/vim/undodir
set undofile                    " Persistent undo
set clipboard+=unnamedplus

"
" Plugins configuration
"

" Neovim / Python plugins
" pip install neovim; pip3 install neovim
" Can also be in a virtualenv
let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'

" gruvbox theme
let g:gruvbox_bold = 0
let g:gruvbox_italic = 1
let g:gruvbox_termcolors = 256
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_contrast_light = 'medium'
let g:gruvbox_italicize_comments = 1
let g:gruvbox_italicize_strings = 1
let g:gruvbox_improved_strings = 0
let g:gruvbox_improved_warnings = 1
colorscheme gruvbox

" override colorscheme config
hi WildMenu     ctermbg=208 ctermfg=16
hi Search       ctermfg=red ctermbg=black   cterm=bold,underline
hi CursorLine   ctermbg=233 term=bold       cterm=bold
hi DiffAdd      ctermbg=235 ctermfg=108     cterm=reverse
hi DiffChange   ctermbg=235 ctermfg=103     cterm=reverse
hi DiffDelete   ctermbg=235 ctermfg=131     cterm=reverse
hi DiffText     ctermbg=235 ctermfg=208     cterm=reverse

" lightline
let g:lightline = {
\    'colorscheme': 'wombat',
\    'active': {
\      'left': [ [ 'mode', 'paste' ],
\                [ 'gitrepo' ],
\                [ 'readonly', 'filename', 'modified', 'tagbar' ] ],
\    },
\    'component': {
\      'tagbar': '%{tagbar#currenttag("%s", "", "f")}',
\      'gitrepo': '%{g:lightline_git_info}',
\    },
\ }

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_go_checkers = ['go', 'golint', 'gofmt']
let g:syntastic_error_symbol = ''
let g:syntastic_warning_symbol = ''
let g:syntastic_style_error_symbol = ''
let g:syntastic_style_warning_symbol = ''
" By default, disable style checks
let g:syntastic_quiet_messages = {
\   "level": [],
\   "type":  ["style"],
\ }

fun! SyntasticToggleQuiet(k, v)
  let idx = index(g:syntastic_quiet_messages[a:k], a:v)
  if idx == -1
    call add(g:syntastic_quiet_messages[a:k], a:v)
    echom 'Syntastic: '.a:k.':'.a:v.' disabled (filtered).'
  else
    call remove(g:syntastic_quiet_messages[a:k], idx)
    echom 'Syntastic: '.a:k.':'.a:v.' enabled (not filtered).'
  endif
  call SyntasticCheck()
endfun

command! SyntasticToggleWarnings call SyntasticToggleQuiet('level', 'warnings')
command! SyntasticToggleStyle    call SyntasticToggleQuiet('type', 'style')

" Nerdtree + Nerdtree tabs
let g:nerdtree_tabs_open_on_console_startup = 0
let NERDTreeQuitOnOpen = 1
let NERDTreeShowBookmarks = 1
let g:NERDTreeWinSize = 40
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Ultisnip
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<Right>"
let g:UltiSnipsJumpBackwardTrigger = "<Left>"

" YCM
let g:ycm_key_list_select_completion = ['<tab>', '<Down>']
let g:ycm_key_list_previous_completion = ['<s-tab>', '<Up>']
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 0

" Indent Line
let g:indentLine_enabled = 1
let g:indentLine_char = '▏'

" vim-go
let g:go_version_warning = 0
let g:go_def_mapping_enabled = 0
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_fmt_command = "goimports"  "Auto :GoImports

" Fzf
" This is the default extra key bindings
let g:fzf_action = {
\   'ctrl-t': 'tab split',
\   'ctrl-x': 'split',
\   'ctrl-v': 'vsplit'
\ }

let g:fzf_layout = { 'down': '~40%' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" map FZF :Ag  to silversearcher-ag
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '-i -U --nogroup --column --color --color-path="0;38;5;202" --color-line-number="0" --color-match="1;33" -p ~/.agignore -f', <bang>0)

" Autoclose
let g:AutoClosePreserveDotReg = 0

" Gutentag / ctags/cscope
let g:gutentags_cache_dir = '~/.cache/vim/tags'
let g:gutentags_exclude_project_root = []
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['.project']
let g:gutentags_resolve_symlinks = 1
let g:gutentags_modules = ['ctags', 'cscope']
let g:gutentags_file_list_command = 'find . -type f -name "*py" -not -path "*/\.*" -follow'
let g:gutentags_ctags_extra_args = ['--fields=+nl']
" debug
"let g:gutentags_trace = 1
"let g:gutentags_debug = 1

" Startify
let g:startify_fortune_use_unicode = 1
let g:startify_session_dir = '~/.cache/vim/session'
let g:startify_session_persistence = 1
let g:startify_session_before_save = [
\   'echo "Cleaning up before saving.."',
\   'silent! NERDTreeTabsClose'
\ ]

" python-syntax
let g:python_highlight_all = 1

" Comfortable motion
let g:comfortable_motion_no_default_key_mappings = 1
let g:comfortable_motion_interval = 1000.0 / 60
let g:comfortable_motion_friction = 80.0
let g:comfortable_motion_air_drag = 4.0
let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.
noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
nnoremap <silent> <M-Down> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
nnoremap <silent> <M-Up> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>


"
" Commands mapping
"

" Remap some common typos
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

" Mapping
let mapleader = " "
map <silent> <F1> :set paste! <cr>
map <silent> <F2> :set number! <cr>
map <silent> <F3> :NERDTreeTabsToggle <cr>
map <silent> <F4> :TagbarToggle <cr>
map <silent> <F5> :IndentLinesToggle <cr>
map <silent> <F6> :call ToggleMouse() <cr>
map <silent> <F7> :SyntasticToggleWarnings <cr>
map <silent> <F8> :SyntasticToggleStyle <cr>
map <silent> <F9> :2,$s/^\s*pick/fixup/g <cr>
map <silent> <F10> :%s/\s\+$//e <cr>
map <silent> <F12> :s/\s\+$//e <cr>
map <silent> <leader>s :Ag <cr>
map <silent> <leader>f :Files <cr>
map <silent> <leader>b :Buffers <cr>
map <silent> <leader>l :Lines <cr>
map <silent> <leader>L :BLines <cr>
map <silent> <leader>t :Tags <cr>
map <silent> <leader>T :BTags <cr>
map <silent> <leader>c :Commits <cr>
map <silent> <leader>C :BCommits <cr>
map <silent> <leader>h :History <cr>
map <silent> <C-a> ^
map <silent> <C-e> $
map <silent> <C-Right> w
map <silent> <C-Left> b
map <silent> <leader>v :vsplit<cr>
map <silent> <leader>x :split <cr>
map <silent> <C-S-Up> :wincmd k<cr>
map <silent> <C-S-Down> :wincmd j<cr>
map <silent> <C-S-Right> :wincmd l<cr>
map <silent> <C-S-Left> :wincmd h<cr>
map <silent> <leader><Up> :wincmd k<cr>
map <silent> <leader><Down> :wincmd j<cr>
map <silent> <leader><Right> :wincmd l<cr>
map <silent> <leader><Left> :wincmd h<cr>
map <silent> <leader><leader> :noh <cr>
map <silent> <leader><ENTER>  <C-w>o
noremap <expr> n (v:searchforward ? 'n' : 'N')
noremap <expr> N (v:searchforward ? 'N' : 'n')

" Tab
map <C-PageDown> :tabprevious<CR>
map <C-PageUp>   :tabnext<CR>
map <C-t>        :tabnew<CR>

" Tag mapping ctags/cscope
map <silent> <leader>/ :YcmCompleter GetType<CR>
map <silent> <leader>? :YcmCompleter GetDoc<CR>
map <silent> <C-]> :YcmCompleter GoTo<CR>
map <silent> <leader>] :execute 'tag' expand('<cword>')<CR>
map <silent> <leader>\ :ts <cr>

autocmd bufenter *
    \ if exists("b:gutentags_files") |
    \   set csto=0 |
    \   map <silent> <C-\> :call Cscope_find('0', expand('<cword>'))<CR> |
    \ else |
    \   map <silent> <C-\> :YcmCompleter GoToReferences<CR> |
    \ endif


autocmd BufNewFile,BufRead *.lib set filetype=sh
autocmd BufNewFile,BufRead *.pp set filetype=puppet
autocmd BufWritePre <buffer> :%s/\s\+$//e
