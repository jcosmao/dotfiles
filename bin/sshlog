#!/bin/bash

set -Eu
set -o noglob

current_pid=$$
current_pgid=$(ps -o pgid= $current_pid | tr -d ' ')
current_sid=$(ps -o sid= $current_pid | tr -d ' ')

SSH_USER=admin
TAILOPTS=''
TAILLINES=''
CAT=0
SSH_PIPE_COMMAND=()
HEADER=1

CONFIG_JSON=$(cat ~/.config/sshlog/config.json 2>/dev/null || true)
if [[ -z $CONFIG_JSON ]]; then
    CONFIG_JSON='{
        "sudo": false,
        "logmap": {
            "default": {
                "default": "cmd:journalctl --output cat",
                "log": "/var/log/*.log"
            }
        }
    }'
fi

USE_SUDO=$(echo $CONFIG_JSON | jq -r '.sudo // false')
[[ $USE_SUDO == true ]] && SUDO=sudo || SUDO=
DOMAIN=$(echo $CONFIG_JSON | jq -r '.domain // ".*"')
LOGMAP=$(echo $CONFIG_JSON | jq -r .logmap)


function cleanup {
    # >&2 echo "│ Cleanup function: ${1:-end}"
    # ps xao user,pid,pgid,sid,user,cmd | grep -P '(sshlog|tail)'
    # Clean ssh subprocess if still there
    tokill=($($SUDO pgrep --list-full -g $current_pgid -s $current_sid | grep -E "ssh -o" | awk '{print $1}' | xargs))
    if [[ ${#tokill[*]} > 0 ]]; then
        # >&2 echo "│ kill -9 ${tokill[*]}"
        $SUDO kill -9 ${tokill[*]} 2> /dev/null || true
    fi
}

function trap_with_arg {
    func="$1" ; shift
    for sig ; do
        trap "$func $sig" "$sig"
    done
}

trap_with_arg cleanup ERR INT TERM EXIT


function sshlog {
    HOST_PATTERN="$1"
    LOG_KEYS=(${2:-default})

    # Get matching host from /etc/hosts - retrieve maximum MAX_HOSTS
    search_hosts=$(
        cat /etc/hosts | grep -Pv '(^#|^$)' | awk '{print $2}' | \
            grep -Pi "^($HOST_PATTERN|$HOST_PATTERN[0-9]*\.${OS_REGION_NAME:-.*}\..*)$" | \
            head -n ${MAX_HOSTS:-10} | xargs
    )

    # Get group from host arg
    len=$(echo $search_hosts | wc -w)
    if [[ $len -eq 0 ]]; then
        search_hosts=$HOST_PATTERN
        group_name=default
    elif [[ $len -eq 1 ]]; then
        group_name=$(echo $search_hosts | cut -d. -f1 | tr -d '[0-9]')
    else
        group_name=$HOST_PATTERN
    fi

    # Find matching group from LOGMAP
    search_group=$(echo $LOGMAP | jq -r 'keys[]' | grep -P "^$group_name$" || true)
    if [[ -z $search_group ]]; then
        # fallback on default group
        group_name="default"
    fi

    # get log files from map[group][key]
    log_files=()
    for key in ${LOG_KEYS[@]}; do
        found_log=$(echo $LOGMAP | jq --arg group_name "$group_name" ."$group_name" | jq -r 'keys[]' | grep -P "^$key$" || true)
        if  [[ -z $found_log ]]; then
            echo "[$key] does not match any of $(echo $LOGMAP | jq ."$group_name" | jq 'keys[]')"
            exit 1
        fi
        log_files+=($(echo $LOGMAP | jq -r ."${group_name}"."${found_log}" ))
    done

    # build logging command
    if [[ ${log_files[@]} =~ cmd: ]]; then
        if [[ ${#LOG_KEYS[@]} > 1 ]]; then
           echo "${log_files[@]} have cmd:xx -- only 1 log arg supported"
           exit 1
        fi
        CMD=$(echo ${log_files[@]} | sed -e 's/^cmd://')
        LOGCMD="echo '==> $CMD <==' ; timeout 600 $CMD $TAILOPTS"
    else
        LOGCMD="timeout 600 tail -v $TAILOPTS ${log_files[@]}"
    fi

    if [[ ${#SSH_PIPE_COMMAND[*]} > 0 ]]; then
        piped_cmd=""
        for arg in "${SSH_PIPE_COMMAND[@]}"; do
            [[ "$arg" == grep ]]  && piped_cmd="$piped_cmd grep --line-buffered" && continue
            which "$arg" &> /dev/null && piped_cmd="$piped_cmd $arg" && continue
            [[ "$arg" =~ ^\- ]] && piped_cmd="$piped_cmd $arg" && continue
            piped_cmd="$piped_cmd \"$arg\""
        done
        LOGCMD="$LOGCMD | $piped_cmd"
    fi

    >&2 echo "│"
    >&2 echo "│    Host:   $search_hosts"
    >&2 echo "│    Files:  ${log_files[@]}"
    >&2 echo "│    Cmd:    $LOGCMD"
    >&2 echo "│"

    for h in $(echo $search_hosts); do
        short=$(echo $h | sed -e "s/\.$DOMAIN//")
        # Execute tail cmd through ssh
        # stdbuf -o0 : do not buffer stdout
        # awk: prefix each line whith  "host filename ..."  #  filename is retrieved using tail -v
        # grep -F '' --line-buffered: try to not mix output
        $SUDO ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -l $SSH_USER $h \
            "$LOGCMD" 2> /dev/null | \
            stdbuf -o0 awk -v host=$short -v header=$HEADER \
            '/^==>/ {
                size=split($2,splitted,"/");
                filename=splitted[size];
                next
            }
            !/^==>/ {
                if(header == 0) {
                    print $0
                } else {
                    print host,filename,$0
                }
            }' | grep -F '' --line-buffered  &
    done | process_output

    wait
}

function process_output {
    # stdout piped, do not color
    [[ -p /dev/stdout ]] && tee || oslog
}

function sshlog_completion {
    local cur first

    cur=${COMP_WORDS[COMP_CWORD]}
    first=${COMP_WORDS[1]}

    case ${COMP_CWORD} in
        1) COMPREPLY=($(compgen -W "$(sshlog --show | jq -r 'keys[]'| xargs) $(cat /etc/hosts | grep -Pv '(^#|^$)' | awk '{print $2}' | grep -Pi "[0-9]\.${OS_REGION_NAME:-.*}\." | xargs)" -- ${first})) ;;
        *) group=$(echo $first | cut -d. -f1 | tr -d "[0-9]");
           sshlog_group=$(sshlog --show | jq -r .\"${group}\")
           [[ ! $sshlog_group = null ]] && sshlog_group=$group || sshlog_group=default
           COMPREPLY=($(compgen -W "$(sshlog --show | jq -r .\"${sshlog_group}\" | jq 'keys[]'| xargs 2> /dev/null)" -- ${cur})) ;;
    esac
}


function print_help {
    echo "
$(basename $0) [group|hostname] [log type]

Options:

$(declare -f main | \
    grep -P '(help=|--|-[a-zA-Z]\))' | \
    xargs | \
    sed -e 's/; /\n/g' -e 's/help=/#/g' | \
    column -t -s '#')
"
    exit
}


function main {
    [[ $# == 0 ]] && print_help

    while [[ $# -ne 0 ]]; do
        arg="$1"; shift
        case "$arg" in
            -u)
                help="ssh user. default=admin"
                export SSH_USER=$1 && shift;;
            -H)
                help="strip headers"
                export HEADER=0 ;;
            -n)
                help="NB: nb lines. tail option"
                export TAILLINES=$1 && shift;;
            --cat|-c)
                help="cat instead tail -f"
                export CAT=1 ;;
            --show|-s)
                help="display log map"
                echo $LOGMAP ; exit ;;
            --max|-m)
                help="maximum nb hosts to get log from"
                export MAX_HOSTS=$1 && shift ;;
            --completion)
                help='completion function (eval "$(sshlog --completion)")'
                declare -f sshlog_completion
                echo complete -F sshlog_completion sshlog
                exit ;;
            --help|-h)
                help="this help"
                print_help ;;
            --)
                help="pipe all to ssh command (ex: grep)"
                export SSH_PIPE_COMMAND=("$@")
                break;;
            *)
                [[ ! $arg =~ ^\-+.* ]] && POSITIONNAL_ARGS+=($arg)

        esac
    done

    if [[ $CAT -eq 1 && -z $TAILLINES ]]; then
        export TAILLINES="+1"
    elif [[ $CAT -eq 0 ]]; then
        export TAILOPTS="$TAILOPTS -f"
    fi

    if [[ -n $TAILLINES ]]; then
        export TAILOPTS="$TAILOPTS -n $TAILLINES"
    fi

    HOST_PATTERN=${POSITIONNAL_ARGS[0]}
    LOG_KEYS=${POSITIONNAL_ARGS[@]:1}

    sshlog "$HOST_PATTERN" "${LOG_KEYS[@]}"
}

main "$@"
